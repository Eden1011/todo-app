services:
    # MariaDB Database
    mariadb:
        image: mariadb:10.11
        container_name: todo-mariadb
        restart: always
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: todo_main
            MYSQL_USER: todoapp
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        ports:
            - "3306:3306"
        volumes:
            - mariadb_data:/var/lib/mysql
            - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
        networks:
            - todo-network
        healthcheck:
            test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
            start_period: 10s
            interval: 10s
            timeout: 5s
            retries: 3

    # MongoDB for chat service
    mongodb:
        image: mongo:7
        container_name: todo-mongodb
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
            MONGO_INITDB_DATABASE: chat_service
        ports:
            - "27017:27017"
        volumes:
            - mongodb_data:/data/db
        networks:
            - todo-network
        healthcheck:
            test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 40s

    # Auth Service
    auth-service:
        build:
            context: ./services/auth-service
            dockerfile: Dockerfile
            args:
                NODE_VERSION: 18
                ALPINE_VERSION: 3.18
                BUILD_DATE: ${BUILD_DATE:-unknown}
                VERSION: ${VERSION:-1.0.0}
                SERVICE_NAME: auth-service
        image: auth-service:latest
        container_name: todo-auth-service
        restart: always
        environment:
            NODE_ENV: production
            PORT: 3000
            DATABASE_URL: "mysql://todoapp:${MYSQL_PASSWORD}@mariadb:3306/auth_service"
            ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
            REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
            REFRESH_TOKEN_EXPIRATION: "7d"
            ACCESS_TOKEN_EXPIRATION: "15m"
            EMAIL_EXPIRATION: "1d"
            APP_NAME: "Todo App"
            APP_URL: "http://localhost:3000"
            AUTO_LOGIN_AFTER_REGISTER: "true"
            SMTP_HOST: "smtp.gmail.com"
            SMTP_PORT: "587"
            SMTP_USER: "glovkakrzys252@gmail.com"
            SMTP_PASS: ${SMTP_PASSWORD}
            FROM_EMAIL: "glovkakrzys252@gmail.com"
            GOOGLE_CLIENT_ID: "672707256810-dg697akric7qush3aafdsfg01nlat90i.apps.googleusercontent.com"
            GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            LOCAL_AUTH_URI: "local"
            LOCAL_EMAIL_VERIFY_URI: "email"
            OAUTH_URI: "oauth"
            OAUTH_GOOGLE_URI: "google"
            OAUTH_GOOGLE_CALLBACK_URI: "callback"
            DISABLE_RATE_LIMIT: "true"
        ports:
            - "3000:3000"
        depends_on:
            mariadb:
                condition: service_healthy
        networks:
            - todo-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--no-verbose",
                    "--tries=1",
                    "--spider",
                    "http://localhost:3000/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

    # DB Service
    db-service:
        build:
            context: ./services/db-service
            dockerfile: Dockerfile
            args:
                NODE_VERSION: 18
                ALPINE_VERSION: 3.18
                BUILD_DATE: ${BUILD_DATE:-unknown}
                VERSION: ${VERSION:-1.0.0}
                SERVICE_NAME: db-service
        image: db-service:latest
        container_name: todo-db-service
        restart: always
        environment:
            NODE_ENV: production
            PORT: 4000
            DATABASE_URL: "mysql://todoapp:${MYSQL_PASSWORD}@mariadb:3306/db_service"
            AUTH_SERVICE_URL: "http://auth-service:3000"
            CHAT_SERVICE_URL: "http://chat-service:5000"
            SMTP_HOST: "smtp.gmail.com"
            SMTP_PORT: "587"
            SMTP_USER: "glovkakrzys252@gmail.com"
            SMTP_PASS: ${SMTP_PASSWORD}
            FROM_EMAIL: "glovkakrzys252@gmail.com"
            APP_NAME: "Todo App"
            DISABLE_RATE_LIMIT: "true"
        ports:
            - "4000:4000"
        depends_on:
            auth-service:
                condition: service_healthy
            mariadb:
                condition: service_healthy
        networks:
            - todo-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--no-verbose",
                    "--tries=1",
                    "--spider",
                    "http://localhost:4000/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

    # Chat Service
    chat-service:
        build:
            context: ./services/chat-service
            dockerfile: Dockerfile
            args:
                NODE_VERSION: 18
                ALPINE_VERSION: 3.18
                BUILD_DATE: ${BUILD_DATE:-unknown}
                VERSION: ${VERSION:-1.0.0}
                SERVICE_NAME: chat-service
        image: chat-service:latest
        container_name: todo-chat-service
        restart: always
        environment:
            NODE_ENV: production
            PORT: 5000
            MONGODB_URI: "mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017/chat_service?authSource=admin"
            AUTH_SERVICE_URL: "http://auth-service:3000"
            DB_SERVICE_URL: "http://db-service:4000"
            ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
            CORS_ORIGIN: "http://localhost:3001"
            DISABLE_RATE_LIMIT: "true"
        ports:
            - "5000:5000"
        depends_on:
            auth-service:
                condition: service_healthy
            db-service:
                condition: service_healthy
            mongodb:
                condition: service_healthy
        networks:
            - todo-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--no-verbose",
                    "--tries=1",
                    "--spider",
                    "http://localhost:5000/health",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

    # Frontend Service
    frontend-service:
        build:
            context: ./services/frontend-service
            dockerfile: Dockerfile
            args:
                NODE_VERSION: 18
                ALPINE_VERSION: 3.18
                BUILD_DATE: ${BUILD_DATE:-unknown}
                VERSION: ${VERSION:-1.0.0}
                SERVICE_NAME: frontend-service
        image: frontend-service:latest
        container_name: todo-frontend-service
        restart: always
        environment:
            NODE_ENV: production
            PORT: 3001
        ports:
            - "3001:3001"
        depends_on:
            auth-service:
                condition: service_healthy
            db-service:
                condition: service_healthy
            chat-service:
                condition: service_healthy
        networks:
            - todo-network
        healthcheck:
            test:
                [
                    "CMD",
                    "wget",
                    "--no-verbose",
                    "--tries=1",
                    "--spider",
                    "http://localhost:3001/",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    mariadb_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./data/mariadb
    mongodb_data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: ./data/mongodb

networks:
    todo-network:
        driver: bridge
        ipam:
            config:
                - subnet: 172.20.0.0/16
        driver_opts:
            com.docker.network.bridge.name: todo-br0
