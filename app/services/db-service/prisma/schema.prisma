generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  authId             Int             @unique // Reference to auth-service user ID
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tasks              Task[]          @relation("TaskOwner")
  assignedTasks      Task[]          @relation("TaskAssignee")
  projectsOwned      Project[]       @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  categories         Category[]
  tags               Tag[]
  notifications      Notification[]
}

model Task {
  id            Int               @id @default(autoincrement())
  title         String            @db.VarChar(255)
  description   String?           @db.Text
  priority      TaskPriority      @default(MEDIUM)
  status        TaskStatus        @default(TODO)
  dueDate       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  ownerId       Int
  owner         User              @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assigneeId    Int?
  assignee      User?             @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  projectId     Int?
  project       Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  categories    CategoryOnTask[]
  tags          TagOnTask[]
  notifications Notification[]

  @@index([ownerId])
  @@index([assigneeId])
  @@index([projectId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  description String?         @db.Text
  ownerId     Int
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  members     ProjectMember[]

  @@index([ownerId])
}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  projectId Int
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model Category {
  id        Int              @id @default(autoincrement())
  name      String           @db.VarChar(255)
  color     String?          @db.VarChar(7)
  ownerId   Int
  owner     User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  tasks     CategoryOnTask[]

  @@index([ownerId])
}

model CategoryOnTask {
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  taskId     Int
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([categoryId, taskId])
  @@index([categoryId])
  @@index([taskId])
}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  color     String?     @db.VarChar(7)
  ownerId   Int
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tasks     TagOnTask[]

  @@index([ownerId])
}

model TagOnTask {
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taskId     Int
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([tagId, taskId])
  @@index([tagId])
  @@index([taskId])
}

model Notification {
  id            Int              @id @default(autoincrement())
  type          NotificationType
  content       String           @db.Text
  isRead        Boolean          @default(false)
  userId        Int
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedTaskId Int?
  relatedTask   Task?            @relation(fields: [relatedTaskId], references: [id], onDelete: SetNull)
  createdAt     DateTime         @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([relatedTaskId])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum NotificationType {
  DUE_DATE_REMINDER
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  COMMENT_ADDED
  PROJECT_INVITE
}
