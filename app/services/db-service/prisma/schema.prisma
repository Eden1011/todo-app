generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @default(autoincrement())
  authId             Int             @unique // Reference to auth-service user ID
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  tasks              Task[]          @relation("TaskOwner")
  assignedTasks      Task[]          @relation("TaskAssignee")
  projectsOwned      Project[]       @relation("ProjectOwner")
  projectMemberships ProjectMember[]
  notifications      Notification[]
}

model Task {
  id               Int               @id @default(autoincrement())
  title            String
  description      String?
  priority         TaskPriority      @default(MEDIUM)
  status           TaskStatus        @default(TODO)
  dueDate          DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  ownerId          Int
  owner            User              @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assigneeId       Int?
  assignee         User?             @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  projectId        Int?
  project          Project?          @relation(fields: [projectId], references: [id], onDelete: SetNull)
  categories       Category[]
  tags             Tag[]
  comments         Comment[]
  recurringPattern RecurringPattern?
  isRecurring      Boolean           @default(false)
}

model Project {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  ownerId     Int
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  tasks       Task[]
  members     ProjectMember[]

}

model ProjectMember {
  id        Int         @id @default(autoincrement())
  projectId Int
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId    Int
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

}

model Category {
  id        Int              @id @default(autoincrement())
  name      String
  color     String?
  ownerId   Int
  owner     User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  tasks     CategoryOnTask[]


}

model CategoryOnTask {
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  taskId     Int
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

}

model Tag {
  id        Int         @id @default(autoincrement())
  name      String
  color     String?
  ownerId   Int
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tasks     TagOnTask[]

}

model TagOnTask {
  tagId      Int
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taskId     Int
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Notification {
  id            Int              @id @default(autoincrement())
  type          NotificationType
  content       String
  isRead        Boolean          @default(false)
  userId        Int
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedTaskId Int?
  createdAt     DateTime         @default(now())

}

model RecurringPattern {
  id          Int                  @id @default(autoincrement())
  type        RecurringType
  interval    Int                  @default(1)
  dayOfWeek   Int? // 0-6, where 0 is Sunday
  dayOfMonth  Int? // 1-31
  monthOfYear Int? // 1-12
  endDate     DateTime?
  taskId      Int                  @unique
  task        Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  exceptions  RecurringException[]
}

model RecurringException {
  id        Int              @id @default(autoincrement())
  date      DateTime
  patternId Int
  pattern   RecurringPattern @relation(fields: [patternId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())

  @@index([patternId])
  @@index([date])
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum NotificationType {
  DUE_DATE_REMINDER
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  COMMENT_ADDED
  PROJECT_INVITE
}

enum RecurringType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
